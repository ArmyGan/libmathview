This is gtkmathview.info, produced by makeinfo version 4.0 from
gtkmathview.texi.

   This file documents GtkMathView, a GTK widget for rendering MathML
documents.

   Copyright (C) 2000 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "Copying" and "GNU General Public License"
are included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.


File: gtkmathview.info,  Node: Top,  Next: Overview,  Prev: (dir),  Up: (dir)

* Menu:

* Overview::        General information about GtkMathView.
* Download::        References to get the source code.
* Usage::           Compiling and installation instructions.
* Interface::       Summary of the interface.
* Configuration::   How to tune-up the widget.
* Bugs::            How to report a bug.


File: gtkmathview.info,  Node: Overview,  Next: Download,  Prev: Top,  Up: Top

Overview
********

GtkMathView is a C++ rendering engine for MathML (see
<http://www.w3.org/Math>) documents. This module is meant to be part of
the Helm project (see <http://www.cs.unibo.it/helm/>), but the widget
is independent from it and easily embeddable within GTK applications.
This library is covered by the GNU General Public Licence (_not_ the
GNU LGPL, this means that the library cannot be linked against
commercial applications. See the file COPYING included in the
distribution for more details).

For questions, comments, suggestions, bug reports, contributions, please
contact the author at the following email address:
<luca.padovani@cs.unibo.it>


File: gtkmathview.info,  Node: Download,  Next: Usage,  Prev: Overview,  Up: Top

Download
********

The complete source code of the GtkMathView widget, along with this
documentation, can be obtained directly from the author's page located
at <http://cs.unibo.it/~lpadovan/mml-widget/>.


File: gtkmathview.info,  Node: Usage,  Next: Interface,  Prev: Download,  Up: Top

Usage
*****

* Menu:

* Requirements::     Auxiliary packages to compile and run GtkMathView.
* Installing::       How to compile the source code of the widget.
* Compile and Link:: How to link against your source code.
* Font setup::       Preparing a font configuration file.


File: gtkmathview.info,  Node: Requirements,  Next: Installing,  Prev: Usage,  Up: Usage

Requirements
============

To compile and use the widget you need the following packages installed
on your system:

   * `GTK' (version 1.2) <http://www.gtk.org>, of course.

   * `libxml' <http://xmlsoft.org>, be careful because all current
     Linux distributions come with version 1.x of libxml _which is not
     compatible_ with version 2. If you need both you will have to
     customize the installation of libxml2 so that it does not produce
     conflicts with previous versions. From version 0.1.1 of the widget
     it has been added backward "compatibility" with version 1.8.x of
     libxml, however this compatibility is not fully effective due to
     some bugs of libxml. It is recommended to upgrade to version 2.
     See file INSTALL for more details.

   * `gcc/g++' (version 2.95.3, this is the version I currently use,
     but the widget will probably compile and run without problems even
     with some previous versions).

   * `t1lib' (version 1.0.1)
     <ftp://ftp.neuroinformatik.ruhr-uni-bochum.de/pub/software/t1lib/>
     Actually, this library is not required, however, if you have it,
     you will be able to use Type1 fonts independently from the X font
     server. Furthermore, you will be able to render anti-aliased text
     and exploit kerning information, if available. This library is
     also needed in the case you want to export MathML to PostScript.
     Finally, the configuration script is usually able to autodetect
     the library, if installed, however you will have to configure some
     files and environment variables. See the section about font
     installation below.


File: gtkmathview.info,  Node: Installing,  Next: Compile and Link,  Prev: Requirements,  Up: Usage

Installing
==========

See the INSTALL file included in the source distribution for detailed
compiling and installation instructions. After installation you will
have the following files:

   * `/usr/local/bin/gtkmathview-config' this is the configuration
     script. Use `gtkmathview-config --cflags' to get compilation flags
     of source files using the widget. Use `gtkmathview --libs' to get
     linking flags and libraries to be linked with your object files.

   * `/usr/local/include/gtkmathview/' include files (you have to
     include `gtkmathview.h' and `minidom.h' if you plan to access the
     DOM tree underlying the widget).

   * `/usr/local/lib/' libraries. Unless you gave `configure' one of
     `--disable-static' or `--disable-shared' you will find in this
     directory both static and shared versions of the widget.

   * `/usr/local/info/', the info file. You can browse it with the
     command `info -f /usr/local/info/gtkmathview.info'.

   * `/usr/local/share/gtkmathview/' some configuration files (fonts and
     operator dictionary) along with their DTDs.


File: gtkmathview.info,  Node: Compile and Link,  Next: Font setup,  Prev: Installing,  Up: Usage

Compile and Link
================

To compile a source file which uses the widget use the command

     gcc -c filename.c -l... -I... `gtkmathview-config --cflags`

The widget is compiled by default to generate both static and shared
object file.  It can be linked dynamically against your applications
with the command:

     gcc -o appname *.o `xml-config --libs` `gtk-config --libs` `gtkmathview-config --libs`


File: gtkmathview.info,  Node: Font setup,  Prev: Compile and Link,  Up: Usage

Font setup
==========

The widget is designed to use the best fonts available on the system.
As of today the font configuration file (`font-configuration.xml') is
designed to use the fonts that comes with the X distribution, in
particular `times' for plain text and `symbol' for mathematical
symbols. In addition to this, the configuration file includes the
description of fonts coming along with _Mathematica_ and some of the
LaTeX fonts.

   On September 8th it has been released the first version of free
fonts from the STIX project. You can download them freely at

     ftp://ftp.elsevier.nl/pub/styles/esstix/esstix.zip

However, the file `font-configuration.xml' must be properly setup to
recognize these fonts. As of today I have no time to seek for each
single glyph name, so if someone has enough patience and wants to
contribute here is a very long work for him/her.

*A special note about True Type fonts*: recent X servers can render a
wide variety of fonts, including True Type fonts usually shipped with
Microsoft Windows and friends. These fonts often have more flexible
scaling capabilities and you could find the final rendering really
improved by their use.  Since their handling is almost completely
hidden inside the X font server, the widget needs not any special
configuration to use them, apart from a proper setting of the font
configuration file (`font-configuration.xml'). In particular, True Type
versions of Mathematica fonts are available as well, but be careful,
because some of the fonts provided still have problems with the X
server, and in some cases the mapping of character is different from a
Type1 font to the related True Type version.

*Type1 fonts and the t1lib library*: starting from version 0.2.0, the
rendering engine can use the t1lib library to render Type1 fonts.  The
support for this library is still under development (well, as anything
else), here are some tips to configure the engine so that you can use
Type1 fonts (please, consult the t1lib documentation at library's home
page for firther details).

First of all, you have to setup a little configuration file for the
t1lib library.  Call this file `t1.config' and place it somewhere in
your home directory.  Here is a sample file:

     #
     #
     ENCODING=.
     AFM=/usr/share/texmf/fonts/afm/
     TYPE1=/usr/share/texmf/fonts/type1/bluesky/cm/:/usr/X11R6/lib/X11/fonts/Type1/:.

In particular, you have to specify where your Type1 fonts resides
(`TYPE1') along with their metrics (`AFM'). Metric information in
optional, since it can be (mostly) recovered by the font file itself.
However, it is needed if you want to exploit for instance kerning.

Next, you have to setup an environment variable `T1LIB_CONFIG' with the
full path to this configuration file. For example, if you use `bash':

     export T1LIB_CONFIG=./config/t1.config

And, if you use `tcsh':

     setenv T1LIB_CONFIG ./config/t1.config

Now you are ready to use Type1 fonts. See the method
`gtk_math_view_new' below.


File: gtkmathview.info,  Node: Interface,  Next: Configuration,  Prev: Usage,  Up: Top

Interface to the  Widget
************************

Macro: `GTK_TYPE_MATH_VIEW'
     used to get the GTK type for the `GtkMathView' class. You don't
     usually need tu use this macro, unless you are subclassing
     `gtkmathview'.

   Macro: `GTK_MATH_VIEW(object)'
     used to cast a GtK widget to a `GtkMathView' class. Remember that
     all methods working with the widget takes a pointer to
     `GtkMathView'.

   Macro: `GTK_MATH_VIEW_CLASS(klass)'
     used to cast a Gtk class to a `GtkMathView' class. This macro is
     used internally, so you probably don't need it.

   Macro: `GTK_IS_MATH_VIEW(object)'
     used to test wether a Gtk object is indeed a `GtkMathView' object.
     You can use it before casting to `GtkMathView'.

   Method: `GtkType gtk_math_view_get_type(void)'
     allocates a new Gtk type for the class `GtkMathView'. Used
     internally.

   Method: `GtkWidget* gtk_math_view_new(GtkAdjustment* h_adj,
GtkAdjustment* v_adj, gboolean t1)'
     this is the main constructor for `GtkMathView'. It allocates a new
     `GtkMathView' object. You can pass a couple of adjustments fro the
     scrolling bars, or just `NULL' in the case you want the widget to
     allocate its own scrolling bars.  The last parameter is used to
     tell `GtkMathView' whether it has to use a Type1 font manager
     (`TRUE') or the (more stable) Gtk font manager (`FALSE').

   Method: `gboolean gtk_math_view_load(GtkMathView* widget, const
gchar* file_name)'
     load a MathML document into the widget and render it. If the
     loading succeed then `TRUE' is returned, `FALSE' otherwise.

   Method: `void gtk_math_view_unload(GtkMathView*)'
     unload a document from the widget, release all resources related
     to the document itself. This is automatically invoked if you load
     two subsequent documents, so you don't need to call this method
     explicitly.

   Method: `mDOMNodeRef gtk_math_view_get_selection(GtkMathView*
widget)'
     return the DOM reference of the node currently selected in the
     document, or `NULL' if there is no document or there is no
     selection

   Method: `void gtk_math_view_set_selection(GtkMathView* widget,
mDOMNodeRef node)'
     forces the selection of the document to be the subtree rooted at
     `node'.  Nothing happens if `node' turns out not to be a node
     rendered by the widget (for example, if it is a content element).
     If `node' is set to `NULL' then the currently selected subtree, if
     any, will be de-selected.

   Method: `guint gtk_math_view_get_width(GtkMathView* widget)'
     return the width of the drawable area of the widget. Please note
     that this not necessarily is equal to the whole widget width, due
     to the inner frame.

   Method: `guint gtk_math_view_get_height(GtkMathView* widget)'
     return the height of the drawable area of the widget. Same
     arguments as for `gtk_math_view_get_width'.

   Method: `void gtk_math_view_get_top(GtkMathView* widget, guint*
top_x, guint* top_y)'
     return in `top_x' and `top_y' the coordinates (in pixels) of the
     upper left displayed corner of the document. Either `top_x' or
     `top_y' may be `NULL', if you are interested in only one of the
     two values.

   Method: `void gtk_math_view_set_top(GtkMathView* widget, guint
top_x, guint top_y)'
     set the coordinates (in pixels) of the upper left displayed corner
     of the document.

   Method: `void gtk_math_view_set_adjustments(GtkMathView* widget,
GtkAdjustment* h_adj, GtkAdjustment* v_adj)'
     set the horizontal and vertical adjustments for the widget.

   Method: `GtkAdjustment* gtk_math_view_get_hadjustment(GtkMathView*
widget)'
     return a pointer to the horizontal adjustment of the widget.

   Method: `GtkAdjustment* gtk_math_view_get_vadjustment(GtkMathView*
widget)'
     return a pointer to the vertical adjustment of the widget.

   Method: `GdkPixmap* gtk_math_view_get_buffer(GtkMathView* widget)'
     return a pointer to the `GdkPixmap' used by the widget as the
     backbuffer.

   Method: `GtkFrame* gtk_math_view_get_frame(GtkMathView* widget)'
     return a pointer to the `GtkFrame' used by the widget to draw the
     border around the drawable area. You can set the border style and
     thickness with the proper methods for this objects.

   Method: `void gtk_math_view_set_font_size(GtkMathView* widget, guint
size)'
     set the default font size (in points) for displaying documents.

   Method: `guint gtk_math_view_get_font_size(GtkMathView* widget)'
     return the default font size (in points) for displaying documents.

   Method: `void gtk_math_view_set_anti_aliasing(GtkMathView* widget,
gboolean b)'
     this is used to enable/disable anti-aliasing for rendering text.
     This function is available with Type1 fonts only, if you are using
     the `T1_FontManager' in conjunction with the `T1_Gtk_DrawingArea'.

   Method: `gboolean gtk_math_view_get_anti_aliasing(GtkMathView*
widget)'
     return `TRUE' if anti-aliasing is enabled (even if it is not
     supported), `FALSE' otherwise.

   Method: `void gtk_math_view_set_kerning(GtkMathView* widget,
gboolean b)'
     enable/disable kerning. This is available for Type1 fonts only
     (see the same conditions as for the
     `gtk_math_view_set_anti_aliasing').  Moreover, kerning is usually
     available only if the rquested font has a corresponding metrics
     file (AFM).

   Method: `gboolean gtk_math_view_get_kerning(GtkMathView* widget)'
     return `TRUE' if kerning is enabled (even if it is not supported),
     `FALSE' otherwise.

   Method: `void gtk_math_view_log_set_verbosity(GtkMathView* widget,
gint level)'
     set the level of verbosity for displayed messages. `level' can be
     an integer from `0' (very few messages, in case of error only) to
     `3' (all messages). Useful for debugging purposes.

   Method: `gint gtk_math_view_log_get_verbosity(GtkMathView* widget)'
     return the current level of verbosity.

   Method: `void gtk_math_view_export_to_postscript(GtkMathView*
widget, FILE* f)'
     write a rendered document to the file `f' in PostScript format.
     This method is still unstable, so use it with care.

   Signal: `"clicked" void user_function(GtkMathView* widget,
mDOMNodeRef node)'
     emitted every time the user clicks on an element with a valid DOM
     reference node.  The node is passed as a parameter to the function.

   Signal: `"jump" void user_function(GtkMathView* widget, mDOMNodeRef
node)'
     emitted subsequently a "clicked" signal, if the `node' has at
     least one attribute named `href'.

   Signal: `"selection_changed" void user_function(GtkMathView* widget,
mDOMNodeRef node)'
     emitted when the selected subtree changes. `node' is the root node
     of the newly selected subtree.


File: gtkmathview.info,  Node: Configuration,  Next: Bugs,  Prev: Interface,  Up: Top

Configuration
*************

To be written.


File: gtkmathview.info,  Node: Bugs,  Prev: Configuration,  Up: Top

Bugs and Contributions
**********************

Of course, I appreciate any kind of contribution. The most basic (and,
maybe, frequent) one is bug report, sending me an email
(<luca.padovani@cs.unibo.it>) with a short description of the problem
encountered, a list of the error messages or failed assertions and the
simplest MathML document that causes the trouble.

Furthermore, the widget is still not complete, it lacks the proper
handling of some MathML elements and attributes, and I think that there
are several improvements which can be done. A note about this: the
widget is based on the MathML 2 Working Draft, which is not yet
confirmed as standard at the moment of writing, however it is assumed
to be a rather stable version.



Tag Table:
Node: Top1022
Node: Overview1422
Node: Download2169
Node: Usage2459
Node: Requirements2823
Node: Installing4548
Node: Compile and Link5745
Node: Font setup6261
Node: Interface9347
Node: Configuration16239
Node: Bugs16373

End Tag Table
